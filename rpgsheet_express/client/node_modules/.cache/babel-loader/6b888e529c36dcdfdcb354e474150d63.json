{"ast":null,"code":"import _objectSpread from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/src/components/NewCharacter.js\";\nimport React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport '../styles/StatsForm.css';\nimport '../styles/StatGrid.css';\nimport '../styles/NameField.css';\nimport '../styles/SaveButton.css';\n\nvar NewCharacter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewCharacter, _Component);\n\n  function NewCharacter(props) {\n    var _this;\n\n    _classCallCheck(this, NewCharacter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NewCharacter).call(this, props));\n    _this.state = {\n      name: '',\n      stats: [{\n        name: 'STR',\n        base: 10,\n        mod: 0\n      }, {\n        name: 'DEX',\n        base: 10,\n        mod: 0\n      }, {\n        // whole object is our 'stat'\n        name: 'INT',\n        // 'name' is our fieldName\n        base: 10,\n        // 'base' is our fieldName\n        mod: 0 // 'mod' is our fieldName\n\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(NewCharacter, [{\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      debugger;\n    }\n  }, {\n    key: \"handleNameChange\",\n    value: function handleNameChange(newValue) {\n      this.setState(function (state) {\n        return _objectSpread({}, state, {\n          // object spread (takes the content of this.state and adds all of it to newState, basically a shallow copy of the object)]\n          name: newValue\n        });\n      });\n    } // setState re-renders\n\n  }, {\n    key: \"handleStatChange\",\n    value: function handleStatChange(statIndex, fieldName, newValue) {\n      // When I change a field, I want to update the stat\n      this.setState(function (state) {\n        // https://reactjs.org/docs/react-component.html#setstate\n        var newState = _objectSpread({}, state); // object spread (takes the content of this.state and adds all of it to newState, basically a shallow copy of the object)]\n\n\n        newState.stats[statIndex][fieldName] = newValue;\n        return newState;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        id: \"full-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        id: \"name-field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Name:\", React.createElement(\"input\", {\n        type: \"text\",\n        id: \"char-name\",\n        ref: \"name\",\n        onChange: function onChange(event) {\n          return _this2.handleNameChange(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })), React.createElement(Table, {\n        bordered: true,\n        size: \"sm\",\n        id: \"stat-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Stat\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Base\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"+\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Mods\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"=\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Value\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, this.state.stats.map(function (stat, index) {\n        return React.createElement(\"tr\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, stat.name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"number\",\n          value: stat.base,\n          onChange: function onChange(event) {\n            return _this2.handleStatChange(index, 'base', event.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        })), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, \"+\"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"number\",\n          value: stat.mod,\n          onChange: function onChange(event) {\n            return _this2.handleStatChange(index, 'mod', event.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        })), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, \"=\"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"number\",\n          readOnly: true,\n          value: parseFloat(stat.base) + parseFloat(stat.mod),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        })));\n      }))), React.createElement(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        id: \"save\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Save\"));\n    }\n  }]);\n\n  return NewCharacter;\n}(Component);\n\nexport { NewCharacter as default };","map":{"version":3,"sources":["/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/src/components/NewCharacter.js"],"names":["React","Component","Form","Table","Button","NewCharacter","props","state","name","stats","base","mod","newValue","setState","statIndex","fieldName","newState","handleSubmit","event","handleNameChange","target","value","map","stat","index","handleStatChange","parseFloat"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button';\nimport '../styles/StatsForm.css';\nimport '../styles/StatGrid.css';\nimport '../styles/NameField.css';\nimport '../styles/SaveButton.css';\n\nexport default class NewCharacter extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      name: '',\n      stats: [\n        {\n          name: 'STR',\n          base: 10,\n          mod: 0,\n        },\n        {\n          name: 'DEX',\n          base: 10,\n          mod: 0,\n        },\n        { // whole object is our 'stat'\n          name: 'INT', // 'name' is our fieldName\n          base: 10, // 'base' is our fieldName\n          mod: 0, // 'mod' is our fieldName\n        }\n      ]\n    }\n  }\n\n  handleSubmit() {\n    debugger\n  }\n\n  handleNameChange(newValue) {\n    this.setState(state => {\n      return {\n        ...state, // object spread (takes the content of this.state and adds all of it to newState, basically a shallow copy of the object)]\n        name: newValue\n      }\n    });\n  }\n  // setState re-renders\n  handleStatChange(statIndex, fieldName, newValue) {\n    // When I change a field, I want to update the stat\n    this.setState((state) => { // https://reactjs.org/docs/react-component.html#setstate\n      let newState = {...state} // object spread (takes the content of this.state and adds all of it to newState, basically a shallow copy of the object)]\n      newState.stats[statIndex][fieldName] = newValue\n\n      return newState\n    });\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit} id='full-form'>\n        {/*<div><NameField/></div>*/}\n        <label id='name-field'>\n          Name:\n          <input type=\"text\" id=\"char-name\" ref=\"name\" onChange={(event) => this.handleNameChange(event.target.value)}/>\n        </label>\n\n        {/*<div><StatGrid/></div>*/}\n        <Table bordered size=\"sm\" id=\"stat-table\">\n          <thead>\n            <tr>\n              <th>Stat</th>\n              <th>Base</th>\n              <th>+</th>\n              <th>Mods</th>\n              <th>=</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            { this.state.stats.map((stat, index) =>\n              <tr key={index}>\n                <td>{stat.name}</td>\n                <td>\n                  <input\n                    type=\"number\"\n                    value={stat.base}\n                    onChange={(event) => this.handleStatChange(index, 'base', event.target.value)}/>\n                </td>\n                <td>+</td>\n                <td>\n                  <input\n                    type=\"number\"\n                    value={stat.mod}\n                    onChange={(event) => this.handleStatChange(index, 'mod', event.target.value)}/>\n                </td>\n                <td>=</td>\n                <td><input type=\"number\" readOnly value={parseFloat(stat.base) + parseFloat(stat.mod)}/></td>\n              </tr>\n            )}\n          </tbody>\n        </Table>\n\n        {/*<div><SaveButton/></div>*/}\n        <Button variant=\"primary\" type=\"submit\" id=\"save\">Save</Button>\n      </Form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}