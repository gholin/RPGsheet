{"ast":null,"code":"import _classCallCheck from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/src/components/StatsForm.js\";\nimport React, { Component } from 'react'; // import NameField from './NameField'\n// import SaveButton from './SaveButton'\n// import StatGrid from './StatGrid'\n\nimport Form from 'react-bootstrap/Form';\nimport '../styles/StatsForm.css';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport '../styles/StatGrid.css';\nimport '../styles/NameField.css';\nimport '../styles/SaveButton.css';\n\nvar StatsForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StatsForm, _Component);\n\n  function StatsForm(props) {\n    var _this;\n\n    _classCallCheck(this, StatsForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StatsForm).call(this, props));\n    _this.state = {\n      character: []\n    };\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(StatsForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Fetches default character JSON from back end upon mounting\n      fetch('/character').then(function (res) {\n        return res.json();\n      }).then(function (character) {\n        return _this2.setState({\n          character: character\n        });\n      }).then(function (responseJson) {\n        console.log(responseJson);\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      // When I change a field, I want to update what's in total value\n      this.setState({\n        value: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      // When I hit the save button, I want the following to happen:\n      // 1. Set value of any blank Base or Mod fields to 0.\n      // 2. Set value of a blank name to default character's name from backend json\n      // 3. For each stat, add the Base and Mod together and put the total into value\n      // 4. Save the stat values and names into the character\n      // 5. Display the character in an alert so we know it's saved\n      // 6. Render a Toast to say save was successful\n      // this.setState({character: event.target.value});\n      //\n      //   this.character.str = this.refs.strength.value;\n      //   this.character.dex = this.refs.dexterity.value;\n      //   this.character.int = this.refs.intelligence.value;\n      // alert('A character was submitted: ' + this.state.value);\n      alert('Character:' + this.state.character);\n      event.preventDefault();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        id: \"full-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Table, {\n        bordered: true,\n        size: \"sm\",\n        id: \"stat-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Current stats:\"), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Name: \", this.state.character.name)), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"STR: \", this.state.character.str)), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"DEX: \", this.state.character.dex)), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"INT: \", this.state.character.int)), React.createElement(\"label\", {\n        id: \"name-field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Name:\", React.createElement(\"input\", {\n        type: \"text\",\n        id: \"char-name\",\n        ref: \"name\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      })), React.createElement(Table, {\n        bordered: true,\n        size: \"sm\",\n        id: \"stat-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Stat\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Base\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"+\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Mods\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"=\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Value\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        id: \"strength\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"STR\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"number\",\n        id: \"str-base\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"+\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"number\",\n        id: \"str-mod\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"=\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"number\",\n        readOnly: true,\n        id: \"str-value\",\n        ref: \"strength\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }))), React.createElement(\"tr\", {\n        id: \"dexterity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"DEX\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"number\",\n        id: \"dex-base\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"+\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"number\",\n        id: \"dex-mod\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"=\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"number\",\n        readOnly: true,\n        id: \"dex-value\",\n        ref: \"dexterity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }))), React.createElement(\"tr\", {\n        id: \"intelligence\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"INT\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"number\",\n        id: \"int-base\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"+\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"number\",\n        id: \"int-mod\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"=\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"number\",\n        readOnly: true,\n        id: \"int-value\",\n        ref: \"intelligence\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }))))), React.createElement(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        id: \"save\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Save\"));\n    }\n  }]);\n\n  return StatsForm;\n}(Component);\n\nexport default StatsForm;","map":{"version":3,"sources":["/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/src/components/StatsForm.js"],"names":["React","Component","Form","Table","Button","StatsForm","props","state","character","handleSubmit","bind","fetch","then","res","json","setState","responseJson","console","log","event","value","target","alert","preventDefault","name","str","dex","int","handleChange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import NameField from './NameField'\n// import SaveButton from './SaveButton'\n// import StatGrid from './StatGrid'\nimport Form from 'react-bootstrap/Form'\nimport '../styles/StatsForm.css';\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button';\nimport '../styles/StatGrid.css';\nimport '../styles/NameField.css';\nimport '../styles/SaveButton.css';\n\nclass StatsForm extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = { character: [] }\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    // Fetches default character JSON from back end upon mounting\n    fetch('/character')\n      .then(res => res.json())\n      .then(character => this.setState({ character }))\n      .then ((responseJson) => {\n        console.log(responseJson);})\n  }\n\n  handleChange(event) {\n    // When I change a field, I want to update what's in total value\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    // When I hit the save button, I want the following to happen:\n    // 1. Set value of any blank Base or Mod fields to 0.\n    // 2. Set value of a blank name to default character's name from backend json\n    // 3. For each stat, add the Base and Mod together and put the total into value\n    // 4. Save the stat values and names into the character\n    // 5. Display the character in an alert so we know it's saved\n    // 6. Render a Toast to say save was successful\n\n    // this.setState({character: event.target.value});\n    //\n    //   this.character.str = this.refs.strength.value;\n    //   this.character.dex = this.refs.dexterity.value;\n    //   this.character.int = this.refs.intelligence.value;\n      // alert('A character was submitted: ' + this.state.value);\n      alert('Character:' + this.state.character);\n      event.preventDefault();\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit} id='full-form'>\n\n        {/* Play around with accessing character values */}\n        <Table bordered size=\"sm\" id=\"stat-table\">\n        <thead>Current stats:</thead>\n        <tbody>\n        </tbody>\n        </Table>\n        <div><p>Name: {this.state.character.name}</p></div>\n        <div><p>STR: {this.state.character.str}</p></div>\n        <div><p>DEX: {this.state.character.dex}</p></div>\n        <div><p>INT: {this.state.character.int}</p></div>\n\n        {/*<div><NameField/></div>*/}\n        <label id='name-field'>\n          Name:\n          <input type=\"text\" id=\"char-name\" ref=\"name\" onChange={this.handleChange}/>\n        </label>\n\n        {/*<div><StatGrid/></div>*/}\n        <Table bordered size=\"sm\" id=\"stat-table\">\n          <thead>\n            <tr>\n              <th>Stat</th>\n              <th>Base</th>\n              <th>+</th>\n              <th>Mods</th>\n              <th>=</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr id='strength'>\n              <td>STR</td>\n              <td><input type=\"number\" id=\"str-base\"/></td>\n              <td>+</td>\n              <td><input type=\"number\" id=\"str-mod\"/></td>\n              <td>=</td>\n              <td><input type=\"number\" readOnly id=\"str-value\" ref=\"strength\"/></td>\n            </tr>\n            <tr id='dexterity'>\n              <td>DEX</td>\n              <td><input type=\"number\" id=\"dex-base\"/></td>\n              <td>+</td>\n              <td><input type=\"number\" id=\"dex-mod\"/></td>\n              <td>=</td>\n              <td><input type=\"number\" readOnly id=\"dex-value\" ref=\"dexterity\"/></td>\n            </tr>\n            <tr id='intelligence'>\n              <td>INT</td>\n              <td><input type=\"number\" id=\"int-base\"/></td>\n              <td>+</td>\n              <td><input type=\"number\" id=\"int-mod\"/></td>\n              <td>=</td>\n              <td><input type=\"number\" readOnly id=\"int-value\" ref=\"intelligence\"/></td>\n            </tr>\n          </tbody>\n        </Table>\n\n        {/*<div><SaveButton/></div>*/}\n        <Button variant=\"primary\" type=\"submit\" id=\"save\">Save</Button>\n      </Form>\n    );\n  }\n}\n\nexport default StatsForm;\n"]},"metadata":{},"sourceType":"module"}