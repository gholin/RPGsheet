{"ast":null,"code":"import _classCallCheck from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/src/components/StatsForm.js\";\nimport React, { Component } from 'react'; // import NameField from './NameField'\n// import SaveButton from './SaveButton'\n// import StatGrid from './StatGrid'\n\nimport Form from 'react-bootstrap/Form';\nimport '../styles/StatsForm.css';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport '../styles/StatGrid.css';\nimport '../styles/NameField.css';\nimport '../styles/SaveButton.css';\nimport NewCharacter from './NewCharacter';\n\nvar StatsForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StatsForm, _Component);\n\n  function StatsForm(props) {\n    var _this;\n\n    _classCallCheck(this, StatsForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StatsForm).call(this, props));\n    _this.state = {\n      character: []\n    };\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(StatsForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Fetches default character JSON from back end upon mounting\n      fetch('/character').then(function (res) {\n        return res.json();\n      }).then(function (character) {\n        return _this2.setState({\n          character: character\n        });\n      }).then(function (responseJson) {\n        console.log(responseJson);\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      // When I change a field, I want to update what's in total value\n      this.setState({\n        value: event.target.value\n      });\n    }\n  }, {\n    key: \"replaceCharacter\",\n    value: function replaceCharacter(newCharacter) {}\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      // When I hit the save button, I want the following to happen:\n      // 1. Set value of any blank Base or Mod fields to 0.\n      // 2. Set value of a blank name to default character's name from backend json\n      // 3. For each stat, add the Base and Mod together and put the total into value\n      // 4. Save the stat values and names into the character\n      // 5. Display a\n      // 6. Render a Toast to say save was successful\n      alert('Character:' + this.state.character);\n      event.preventDefault(); // this.setState({character: event.target.value});\n      //\n      //   this.character.str = this.refs.strength.value;\n      //   this.character.dex = this.refs.dexterity.value;\n      //   this.character.int = this.refs.intelligence.value;\n      // alert('A character was submitted: ' + this.state.value);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Table, {\n        striped: true,\n        size: \"sm\",\n        id: \"current-table\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"CURRENT STATS\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Name: \", this.state.character.name)), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"STR: \", this.state.character.str)), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"DEX: \", this.state.character.dex)), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"INT: \", this.state.character.int)))), React.createElement(NewCharacter, {\n        onSave: this.replaceCharacter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return StatsForm;\n}(Component);\n\nexport default StatsForm;","map":{"version":3,"sources":["/Users/sshepherd/Desktop/code/hackweek-feb2019/shep-react/rpgsheet_express/client/src/components/StatsForm.js"],"names":["React","Component","Form","Table","Button","NewCharacter","StatsForm","props","state","character","handleSubmit","bind","fetch","then","res","json","setState","responseJson","console","log","event","value","target","newCharacter","alert","preventDefault","name","str","dex","int","replaceCharacter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import NameField from './NameField'\n// import SaveButton from './SaveButton'\n// import StatGrid from './StatGrid'\nimport Form from 'react-bootstrap/Form'\nimport '../styles/StatsForm.css';\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button';\nimport '../styles/StatGrid.css';\nimport '../styles/NameField.css';\nimport '../styles/SaveButton.css';\nimport NewCharacter from './NewCharacter';\n\nclass StatsForm extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = { character: [] }\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    // Fetches default character JSON from back end upon mounting\n    fetch('/character')\n      .then(res => res.json())\n      .then(character => this.setState({ character }))\n      .then ((responseJson) => {\n        console.log(responseJson);})\n  }\n\n  handleChange(event) {\n    // When I change a field, I want to update what's in total value\n    this.setState({value: event.target.value});\n  }\n\n  replaceCharacter(newCharacter) {\n    \n  }\n\n  handleSubmit(event) {\n    // When I hit the save button, I want the following to happen:\n    // 1. Set value of any blank Base or Mod fields to 0.\n    // 2. Set value of a blank name to default character's name from backend json\n    // 3. For each stat, add the Base and Mod together and put the total into value\n    // 4. Save the stat values and names into the character\n    // 5. Display a\n    // 6. Render a Toast to say save was successful\n\n\n    alert('Character:' + this.state.character);\n    event.preventDefault();\n\n    // this.setState({character: event.target.value});\n    //\n    //   this.character.str = this.refs.strength.value;\n    //   this.character.dex = this.refs.dexterity.value;\n    //   this.character.int = this.refs.intelligence.value;\n      // alert('A character was submitted: ' + this.state.value);\n  }\n\n  render() {\n    return (\n      <div>\n        {/* Play around with accessing character values */}\n        <Table striped size=\"sm\" id=\"current-table\">\n          <thead><tr><td>CURRENT STATS</td></tr></thead>\n          <tbody>\n            <tr><td>Name: {this.state.character.name}</td></tr>\n            <tr><td>STR: {this.state.character.str}</td></tr>\n            <tr><td>DEX: {this.state.character.dex}</td></tr>\n            <tr><td>INT: {this.state.character.int}</td></tr>\n            </tbody>\n        </Table>\n\n        <NewCharacter onSave={this.replaceCharacter} />\n      </div>\n    );\n  }\n}\n\nexport default StatsForm;\n"]},"metadata":{},"sourceType":"module"}